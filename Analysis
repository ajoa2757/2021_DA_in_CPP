# 2021_DA_in_CPP
2021년 자료구조 근본찾기 프로젝트


======================
시간분석

메서드의 효율 등을 검사하기 위해선, Big-O notation 으로 수행시간을 나타낼 수 있어야 한다.


알고리즘의 시간 분석은..

1. input 을 output 으로 바꾸는 total 시간을 계산한다.
2. input 의 크기 n에 비례하여 나타낸다.
3. n에 대하여 worst case 만을 valid 하다고 판정한다.


==================
시간 분석의 방법론

1. 이론적 분석

Big-O notation 을 사용하여 input case 의 크기에 기초하여 수행시간을 분석한다.

ㄴ>모든 실험 case 에 대해 생각할 수 있다.
ㄴ>완성된 구현 없이도 분석할 수 있다.
ㄴ>분석이 환경에 독립적이다. 


2. 실험적 분석

clock() 함수를 이용하여, 여러가지 크기의 test case 들의 경우에 따른 결과물을 통해 유추한다. 

이 접근은 1에 비해 정확할 수 있지만 여러 한계가 존재한다. 
ㄴ>서로 다른 알고리즘을 비교할 때 같은 환경설정 아래서 실시해야만 한다.
ㄴ>실제로 구현을 해야만 분석을 실시할 수 있다.
ㄴ>test case 를 벗어나는 input 들에 대해서는 놓칠 수 있다.

============
psudo code

의사코드는 딱히 정해진 양식이 없다. 

1. 함수는 이름, input 에 대한 설명, 기대되는 output 을 기술한다. (*설계 이슈는 적지 아니한다)
2. 할당은 '<-' 로, 괄호는 들여쓰기로 대체하는 경우가 많다.
3. 그 외 제어문들은 단어만 그대로 사용, 어떻게 제어되는지 알아볼 수 있게만.

============
기본 단위연산들

Big-O notation 을 계산하기 전에 기본적인 단위를 정의할 필요가 있다.

1. 사칙연산
2. 부등호를 이용한 true/false 연산
3. 대입
4. 배열에서 index 접근

=============
Big-O notation

0. 함수의 수행을 대략 n에 대한 함수로 나타낸다. 
1. 상수를 제거한 n의 함수식으로만 복잡도를 나타낸다.



몇가지 친척들이 존재하기는 하지만, 잘 사용하지 않는다.
