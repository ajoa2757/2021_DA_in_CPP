# 2021_DA_in_CPP
2021년 자료구조 근본찾기 프로젝트

1장에 기술된 객체지향 설계의 기본적인 스타일에 대한 이야기

=========
첫번째 - 헤더 파일

선언들이 들어있는 헤더 파일을 만든다.

#ifndef 헤더파일_이름_IN_대문자
#define 헤더파일_이름_IN_대문자

(클래스 선언부)

#endif

ㄴ>위의 전처리기 내용들은 무슨 기능을 하는가?
1. 헤더파일이 중복되어 정의되지 않았으면 좋겠다.
2. 따라서 일종의 조건문을 사용하며 컴파일 과정에서 한번만 포함되게 하고자 한다.
3. 헤더파일_이름_IN_대문자 라는 요소가 정의되지 않았다는 전제 하에 클래스가 선언된다.
4. #endif 로써 조건문이 끝나는 셈.

---
클래스 선언부

class Passenger
{

  
};

위는 항상 하던 대로.

다만, Getter 함수들(private 요소들을 단순반환하는 함수들)은 그자리에서 간단하게 정의하고 넘어가도록 한다.

============
두번째 - 클래스 정의부

#include "Passenger.h"
using namespace std;

위 두줄을 포함하고 시작한다 - 이는 세번째, 사용자 코드에서도 마찬가지다.

선언이 포함된 헤더파일만 include 하여도 같은 프로젝트 내부의 정의부 Passenger.cpp는 include 할 필요가 없다.

std namespace를 포함시키는 과정은 std 영역을 축약해 사용하기 위해 파일마다 다 사용해 주어야 한다.

============
세번째 - 사용자 함수

main 함수가 포함된 cpp 파일이다. 

#include "Passenger.h"
using namespace std;

역시 이것을 포함시키고 시작한다. 헤더파일만 포함하여도 프로젝트 내부의 정의부는 같이 따라온다.


객체지향 프로그래밍의 스타일은 main 함수에 동작 함수 하나만을 실행시키는 스타일을 선호한다.
(가령, 새로운 Passenger 의 데이터를 동적할당으로 생성하고, 출력하고, 동적할당을 해제하기 까지의 과정을 포함한 함수 단 하나)





============
네번째 - 이름

이름은 기본적으로 데이터의 임무와 연관이 있는 이름을 지어준다.

클래스의 이름은 첫글자를 대문자로 한다.

함수와 변수의 이름은 첫글자를 소문자로 한다.


const int HOUR_DAY = 24;
const int HOUR_WEEK = 24*7;
ㄴ>위와 같이 의미있는 상수는 이름이 있는 것을 사용하는 것이 좋다.
